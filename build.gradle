// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
  ext.kotlin_version = '1.0.5-2'
  repositories {
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
    maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:2.2.2'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath 'io.fabric.tools:gradle:1.+'
    classpath 'com.google.gms:google-services:3.0.0'

    // NOTE: Do not place your application dependencies here; they belong
    // in the individual module build.gradle files

    classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0'
    classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.6.1'
    classpath "com.gradle:build-scan-plugin:1.3"
    classpath 'com.google.code.findbugs:findbugs:3.0.1'
  }
}

allprojects {
  repositories {
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
    maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
  }
}

task clean(type: Delete) {
  delete rootProject.buildDir
}

// `./gradlew build -Dscan` to check & upload result
apply plugin: "com.gradle.build-scan"

buildScan {
  licenseAgreementUrl = 'https://gradle.com/terms-of-service'
  licenseAgree = 'yes'
}


apply plugin: "findbugs"

import edu.umd.cs.findbugs.SortedBugCollection

task findbugs(type: FindBugs) {
  System.out.println(files("${project.rootDir}/app/build/intermediates/classes/debug/net/yslibrary/monotweety/").join("\n"))
  ignoreFailures = true
  effort = 'max'
  reportLevel = 'low'
  excludeFilter = new File("${project.rootDir}/code_quality/findbugs_filter.xml")
  classes = files("${project.rootDir}/app/build/intermediates/classes/debug/net/yslibrary/monotweety/")
  source "${project.rootDir}/app/src/main"
  include '**/*.kotlin'
  classpath = files()
}

// http://qiita.com/k_ui/items/c9b6789ec1b41e0a5060
def printFBXml(File xml) {
  if (!xml.exists()) return

  def bugs = new SortedBugCollection()
  bugs.readXML(xml)

  def msgs = bugs.collect { bug ->
    def srcLine = bug.primarySourceLineAnnotation
    "${project.rootDir}/app/src/main/java/${srcLine.getSourcePath()}:${srcLine.getStartLine()}: ${bug.abridgedMessage} ${bug.bugPattern.detailPlainText.trim()}".trim()
  }
  if (msgs.isEmpty()) return

  logger.error msgs.join("\n---\n")
}

task printFindBugsResults() {
  printFBXml tasks.findbugs.reports.xml.destination
}

tasks.printFindBugsResults.dependsOn tasks.findbugs